name: CI Pipeline with Cucumber and Code Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  cucumber-tests:
    runs-on: ubuntu-latest

    env:
      SMTP_SERVER: 'sandbox.smtp.mailtrap.io'
      SMTP_USERNAME: 'a0c4d400e70cc1'
      SMTP_PASSWORD: 'fa3dfbec2662df'
      TO_EMAIL: 'la_melzi@esi.dz'
      SONARQUBE_TOKEN: 'd8063752dfd5d16a5b66a4354f2e0d4d35d3f77c'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Run tests
        run: ./gradlew test

      - name: Archive test results
        if: always()
        run: |
          mkdir -p test-reports
          cp build/test-results/**/*.xml test-reports/
        continue-on-error: true

      - name: Generate Jacoco code coverage report
        run: ./gradlew jacocoTestReport

      - name: Publish Jacoco report
        run: |
          mkdir -p jacoco-report
          cp -r build/reports/jacoco/test/html jacoco-report/

      - name: Run SonarQube analysis
        run: ./gradlew sonar
        env:
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}

      - name: Wait for Quality Gate
        run: |
          echo "Waiting for quality gate result"
          curl -u "admin:${{ secrets.SONARQUBE_TOKEN }}" \
               -X GET "http://197.140.142.82:9000/api/qualitygates/project_status?projectKey=my_project"

      - name: Build the project
        run: ./gradlew clean build -x test

      - name: Publish artifacts to Maven repository
        run: ./gradlew publish

  notify:
    runs-on: ubuntu-latest
    needs: cucumber-tests
    steps:
      - name: Send email on success
        if: success()
        run: |
          curl --url "smtp://${{ secrets.SMTP_SERVER }}" \
               --ssl-reqd \
               --mail-from "${{ secrets.SMTP_USERNAME }}" \
               --mail-rcpt "${{ secrets.TO_EMAIL }}" \
               --user "${{ secrets.SMTP_USERNAME }}:${{ secrets.SMTP_PASSWORD }}" \
               -T <(echo -e "Subject: Deployment Success\n\nThe deployment was successful.")

      - name: Send email on failure
        if: failure()
        run: |
          curl --url "smtp://${{ secrets.SMTP_SERVER }}" \
               --ssl-reqd \
               --mail-from "${{ secrets.SMTP_USERNAME }}" \
               --mail-rcpt "${{ secrets.TO_EMAIL }}" \
               --user "${{ secrets.SMTP_USERNAME }}:${{ secrets.SMTP_PASSWORD }}" \
               -T <(echo -e "Subject: Deployment Failed\n\nThe deployment failed. Please check the logs.")